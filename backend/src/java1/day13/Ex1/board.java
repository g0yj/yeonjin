package java1.day13.Ex1;



//설계도( 1. 데이터 모델링	2. 기능 패턴을 구분)
	
public class board {

	
	
//-----객체-----------------//
	/*
	 * 클래스/클래스 -------new----------->인스턴스/객체
	 * [개발자]			[인스턴스화]	
	 * 
	 */
	
//---------클래스 구성 멤버(필드, 생성자, 메소드)------------------//
/*	
	//1. 필드: 객체의 데이터 저장하는 곳
		- 필드 종류
			- 인스턴스 필드 : 객체 생성 시 객체 안에 저장되어 있는 필드(heap저장)
			- 정적 필드: static 사용. 프로그램 실행 시 우선 할당(객체 없이 저장되어있는 필드 , 메소드영역에 저장)
		
		- 필드 타입(변수와 헷갈릴 수 있)
			- 기본타입 
			- 참조타입: 클래스[객체], 인터페이스, 배열, 열거타입 등 
		
		- 필드 접근 권한	
			- 접근제한자: 외부에서 해당 필드를 접근 할 수 있는 권한/제한
				public : 프로젝트 내 모든 곳
				private : 현재 클래스에서만 
				(default): 동일한 패키지에서만
				protected : 부모 따라감 
		- 기타 키워드	
			- final : 수정 불가 필드 만들기
			- static final: 프로그램 전체에서 상수 만들기
	
		- 싱글톤 : 프로그램 내 1개만 존재하는 객체
			1. private static  사용하는 객체 선언
			2. public static getInstance() :  싱글톤 객체를 반환해주는 함수
			3. private 생성자() :  외부로부터 생성자 사용 금지
			
	
	//2. 생성자: 객체 초기화 시 사용 (처음 생성할 때 값을 대입)
		- 생성자가 사용되는 경우: 객체선언
			클래스명 객체변수명 = new 생성자명();
			
		- 생성자 선언
			접근제한자 클래스명(타입 매개변수 , 타입 매개변수){}
			
		- 생성자 역할
			1. 객체 생성 시 매개변수를 받아 필드에 저장
			2. 유효성 검사, 계산식이 필요한 값을 필드에 저장할 때
			
		- 생성자의 종류 : 오버로딩으로 다양하게 선언 가능
			- 오버로딩: 식별자명이 동일하면 안되는데 식별자 명이 같더라도 매개변수의 갯수, 순서, 타입에 따라 식별이 가능한 것
	
		- 접근제한 private, public , (default)  <- protected 사용 불가 (상속개념)
	
		- 기타 키워드
			- this : 생략 가능함. 현재 클래스의 구성멤버 식별할 때 사용
			- this.필드명 : 외부로부터 들어온 매개변수명과 현재 클래스 내 필드명과 같을 때, 필드를 식별하기 위해 사용
			- this() : 현재 클래스의 생성자 호출
			- this.메소드명() 
	
	
	//3. 메소드: 객체의 행동/ 동적을 수행 할 때 사용
	 	- 메소드 종류
	 		- 인스턴스 메소드: 객체 생성 시 사용 가능한 메소드
			- 정적 메소드: static으로 객체 없이 사용 가능한 메소드
			
		- 메소드 선언
			접근제한자 리턴타입 메소드명(타입 매개변수, 타입 매개변수)
			
			- 접근 제한자
				public , private, default, protected
		
			- 리턴타입: 메소드 종료 시 호출했던 곳으로 반환해주는 값의 타입
			
			- 매개변수: 메소드 호출 시 메소드 안으로 들어오는 데이터
			
			- { } : 메소드 실행 코드
			
			- return : (void 일 때 생략 가능) 리턴 타입에 맞는 값을 리턴 후 메소드 종료
		
		- 메소드 사용 목적
			1. 객체간의 상호작용 : 서로 다른 객체간의 데이터 이동
			2. 재활용 : 코드 줄이기 가넝(클린코딩)
			3. 매개변수에 따른 서로 다른 실행/결과 반환 가능
			
		- 외부객체에서 메소드를 호출하는 방법
			1. 객체를 이용한 인스턴스 메소드 호출
				클래스명 객체변수명 = new 생성자명();
				객체변수명.메소드명();
				
			2. 객체 없이 정적 메소드 호출
				클래스명.메소드명();
				
			3. 싱글톤(객체) 내 인스턴스 메소드 호출
				클래스명.getInstance().메소드명();
		
// 디자인 패턴---------------------------------------------------//
 * 	- MVC 디자인 패텅: 기능 역할에 따른 구분
 * 		V : 입출력 담당
 * 			- 추후 html,js 언어 사용되는 자리 
 * 			- 임시로 console 사용 예정
 * 		
 * 
 * 		C : 제어/로직 = 기능처리/ 유효성 검사 등을 담당
 * 			- 객체를 여러개 가질 필요 없기 때문에 싱글톤 많이 씀 :
 * 				 회원가입 기능은 1개만 있어도 가능하니까
 * 				 동일한 메소드를 갖는 객체가 있어도 되지만 굳이 ? 
 * 			
 * 		
 * 		M : 데이터 모델과 실제 데이터	
 * 			- DTO : 데이터 이동 객체 [ 서로 다른 레이어 간 이동할 때 객체사용 ]
 * 				1. 여러개 서로 다른 타입을 이동하면 불편..
 * 					- int int String double 이것 보단 DTO로 보내는게 낫지 않겠?
 * 					- 하나의 객체로 만들어서 이동 [DTO]
 * 				2. DTO 가독성을 높일 수 있음
 * 					member : ??? 회원객체인데 회원 무슨객체?
 * 					memberDto: 회원 객체인데.. 이동객체구나 .. 파악 가능
 * 
 * 			- DAO : 데이터 접근 객체 [실제 원본 데이터(DB) 호출/접근만 ]
 * 	
		
		
		
		
*/	
	
	
	
}
